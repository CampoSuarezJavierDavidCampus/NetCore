// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20230731135156_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idMarca");

                    b.Property<string>("Descipcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("idDescipcion");

                    b.HasKey("Id");

                    b.ToTable("Marca", (string)null);
                });

            modelBuilder.Entity("Domain.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idPais");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("nombrePais");

                    b.HasKey("Id");

                    b.ToTable("Pais", (string)null);
                });

            modelBuilder.Entity("Domain.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idPersona");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("apellidoPersona");

                    b.Property<int>("Edad")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("edadPersona");

                    b.Property<int>("IdProvincia")
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idProv");

                    b.Property<int>("IdTipoPersona")
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idTipPer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("nombrePersona");

                    b.HasKey("Id");

                    b.HasIndex("IdProvincia");

                    b.HasIndex("IdTipoPersona");

                    b.ToTable("Persona", (string)null);
                });

            modelBuilder.Entity("Domain.PersonaProducto", b =>
                {
                    b.Property<int>("IdPersona")
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idPersona");

                    b.Property<int>("IdProducto")
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idProducto");

                    b.HasKey("IdPersona", "IdProducto");

                    b.HasIndex("IdProducto");

                    b.ToTable("ProductoPersona", (string)null);
                });

            modelBuilder.Entity("Domain.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idProducto");

                    b.Property<string>("Descipcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("DescipcionProducto");

                    b.Property<int?>("IdMarca")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("IdMarca");

                    b.Property<double?>("Precio")
                        .HasColumnType("double");

                    b.Property<string>("Referencia")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdMarca");

                    b.ToTable("Producto", (string)null);
                });

            modelBuilder.Entity("Domain.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idProvincia");

                    b.Property<int>("IdRegion")
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idRegion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("nombreProvincia");

                    b.HasKey("Id");

                    b.HasIndex("IdRegion");

                    b.ToTable("Provincia", (string)null);
                });

            modelBuilder.Entity("Domain.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idRegion");

                    b.Property<int>("IdPais")
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idPais");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("nombreRegion");

                    b.HasKey("Id");

                    b.HasIndex("IdPais");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("Domain.TipoPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("int")
                        .HasColumnName("idTIpoPersona");

                    b.Property<string>("Descipcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("desciptionTIpoPersona");

                    b.HasKey("Id");

                    b.ToTable("TipoPersona", (string)null);
                });

            modelBuilder.Entity("Domain.Persona", b =>
                {
                    b.HasOne("Domain.Provincia", "Provincia")
                        .WithMany("Personas")
                        .HasForeignKey("IdProvincia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TipoPersona", "TipoPersona")
                        .WithMany("Personas")
                        .HasForeignKey("IdTipoPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provincia");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Domain.PersonaProducto", b =>
                {
                    b.HasOne("Domain.Persona", "Persona")
                        .WithMany("PersonaProductos")
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Producto", "Producto")
                        .WithMany("PersonaProductos")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Domain.Producto", b =>
                {
                    b.HasOne("Domain.Marca", "Marca")
                        .WithMany("Productos")
                        .HasForeignKey("IdMarca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("Domain.Provincia", b =>
                {
                    b.HasOne("Domain.Region", "Region")
                        .WithMany("Provincias")
                        .HasForeignKey("IdRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Region", b =>
                {
                    b.HasOne("Domain.Pais", "Pais")
                        .WithMany("Regions")
                        .HasForeignKey("IdPais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Domain.Marca", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Domain.Pais", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Domain.Persona", b =>
                {
                    b.Navigation("PersonaProductos");
                });

            modelBuilder.Entity("Domain.Producto", b =>
                {
                    b.Navigation("PersonaProductos");
                });

            modelBuilder.Entity("Domain.Provincia", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Region", b =>
                {
                    b.Navigation("Provincias");
                });

            modelBuilder.Entity("Domain.TipoPersona", b =>
                {
                    b.Navigation("Personas");
                });
#pragma warning restore 612, 618
        }
    }
}
